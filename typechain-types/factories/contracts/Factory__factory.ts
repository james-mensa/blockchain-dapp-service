/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Factory, FactoryInterface } from "../../contracts/Factory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "salt",
        type: "uint256",
      },
    ],
    name: "Deployed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "salt",
        type: "uint256",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "salt",
        type: "uint256",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610521806100206000396000f3fe6080604052600436106100295760003560e01c806394ca2cb51461002e5780639c4ae2d01461006b575b600080fd5b34801561003a57600080fd5b50610055600480360381019061005091906102cc565b61009b565b6040516100629190610369565b60405180910390f35b610085600480360381019061008091906102cc565b6100e0565b6040516100929190610369565b60405180910390f35b600060ff60f81b308385805190602001206040516020016100bf9493929190610465565b6040516020818303038152906040528051906020012060001c905092915050565b6000808284516020860134f59050803b6100f957600080fd5b7fb03c53b28e78a88e31607a27e1fa48234dce28d5d9d9ec7b295aeb02e674a1e1818460405161012a9291906104c2565b60405180910390a18091505092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101a38261015a565b810181811067ffffffffffffffff821117156101c2576101c161016b565b5b80604052505050565b60006101d561013c565b90506101e1828261019a565b919050565b600067ffffffffffffffff8211156102015761020061016b565b5b61020a8261015a565b9050602081019050919050565b82818337600083830152505050565b6000610239610234846101e6565b6101cb565b90508281526020810184848401111561025557610254610155565b5b610260848285610217565b509392505050565b600082601f83011261027d5761027c610150565b5b813561028d848260208601610226565b91505092915050565b6000819050919050565b6102a981610296565b81146102b457600080fd5b50565b6000813590506102c6816102a0565b92915050565b600080604083850312156102e3576102e2610146565b5b600083013567ffffffffffffffff8111156103015761030061014b565b5b61030d85828601610268565b925050602061031e858286016102b7565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061035382610328565b9050919050565b61036381610348565b82525050565b600060208201905061037e600083018461035a565b92915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6103cb6103c682610384565b6103b0565b82525050565b60008160601b9050919050565b60006103e9826103d1565b9050919050565b60006103fb826103de565b9050919050565b61041361040e82610348565b6103f0565b82525050565b6000819050919050565b61043461042f82610296565b610419565b82525050565b6000819050919050565b6000819050919050565b61045f61045a8261043a565b610444565b82525050565b600061047182876103ba565b6001820191506104818286610402565b6014820191506104918285610423565b6020820191506104a1828461044e565b60208201915081905095945050505050565b6104bc81610296565b82525050565b60006040820190506104d7600083018561035a565b6104e460208301846104b3565b939250505056fea2646970667358221220b6a6219f566db2e57ef840eabdbab58d346641b53061d527ec9c7890f206abba64736f6c63430008140033";

type FactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Factory__factory extends ContractFactory {
  constructor(...args: FactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Factory> {
    return super.deploy(overrides || {}) as Promise<Factory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Factory {
    return super.attach(address) as Factory;
  }
  override connect(signer: Signer): Factory__factory {
    return super.connect(signer) as Factory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryInterface {
    return new utils.Interface(_abi) as FactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Factory {
    return new Contract(address, _abi, signerOrProvider) as Factory;
  }
}
